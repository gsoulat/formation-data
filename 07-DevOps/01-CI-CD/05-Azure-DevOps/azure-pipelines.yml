# Azure Pipeline complet pour une application Node.js avec d√©ploiement sur Azure

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - docs/*
      - README.md

pr:
  branches:
    include:
      - main

variables:
  - name: nodeVersion
    value: '18.x'
  - name: buildConfiguration
    value: 'Release'
  - name: vmImageName
    value: 'ubuntu-latest'

  # Variables pour Azure
  - name: azureSubscription
    value: 'azure-service-connection'
  - name: webAppName
    value: 'myapp'
  - name: resourceGroupName
    value: 'myapp-rg'

  # Variables de groupe (secrets)
  - group: production-variables

stages:
  # Stage 1: Build
  - stage: Build
    displayName: 'Build Application'
    jobs:
      - job: BuildJob
        displayName: 'Build Job'
        pool:
          vmImage: $(vmImageName)

        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(nodeVersion)

          - task: Cache@2
            displayName: 'Cache npm packages'
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npm_config_cache)

          - script: |
              npm ci
            displayName: 'Install dependencies'

          - script: |
              npm run lint
            displayName: 'Run linter'

          - script: |
              npm run build
            displayName: 'Build application'

          - task: ArchiveFiles@2
            displayName: 'Archive build artifacts'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true

          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: drop
            displayName: 'Publish build artifacts'

  # Stage 2: Test
  - stage: Test
    displayName: 'Test Application'
    dependsOn: Build
    jobs:
      - job: UnitTests
        displayName: 'Unit Tests'
        pool:
          vmImage: $(vmImageName)

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)

          - script: npm ci
            displayName: 'Install dependencies'

          - script: npm run test:unit
            displayName: 'Run unit tests'

          - task: PublishTestResults@2
            displayName: 'Publish test results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/test-results.xml'
              mergeTestResults: true
              failTaskOnFailedTests: true

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'

      - job: IntegrationTests
        displayName: 'Integration Tests'
        pool:
          vmImage: $(vmImageName)

        services:
          postgres:
            image: postgres:15
            ports:
              - 5432:5432
            env:
              POSTGRES_DB: testdb
              POSTGRES_USER: testuser
              POSTGRES_PASSWORD: testpass

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)

          - script: npm ci
            displayName: 'Install dependencies'

          - script: npm run test:integration
            displayName: 'Run integration tests'
            env:
              DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

  # Stage 3: Security
  - stage: Security
    displayName: 'Security Scan'
    dependsOn: Build
    jobs:
      - job: SecurityScan
        displayName: 'Security Scan Job'
        pool:
          vmImage: $(vmImageName)

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)

          - script: npm ci
            displayName: 'Install dependencies'

          - script: |
              npm audit --audit-level=moderate
            displayName: 'NPM Audit'
            continueOnError: true

          - task: WhiteSource@21
            displayName: 'WhiteSource Scan'
            inputs:
              cwd: '$(System.DefaultWorkingDirectory)'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            continueOnError: true

  # Stage 4: Deploy to Staging
  - stage: DeployStaging
    displayName: 'Deploy to Staging'
    dependsOn: [Test, Security]
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: DeployToStaging
        displayName: 'Deploy to Staging Environment'
        pool:
          vmImage: $(vmImageName)
        environment:
          name: 'staging'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download build artifacts'
                  inputs:
                    artifactName: 'drop'
                    targetPath: '$(Pipeline.Workspace)/drop'

                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App (Staging)'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    appName: '$(webAppName)-staging'
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                    deploymentMethod: 'zipDeploy'

                - task: AzureCLI@2
                  displayName: 'Run smoke tests'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "Running smoke tests..."
                      sleep 10
                      curl -f https://$(webAppName)-staging.azurewebsites.net/health || exit 1
                      echo "Smoke tests passed!"

  # Stage 5: Deploy to Production
  - stage: DeployProduction
    displayName: 'Deploy to Production'
    dependsOn: [Test, Security]
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployToProduction
        displayName: 'Deploy to Production Environment'
        pool:
          vmImage: $(vmImageName)
        environment:
          name: 'production'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            preDeploy:
              steps:
                - script: echo "Running pre-deployment checks..."
                  displayName: 'Pre-deployment checks'

            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download build artifacts'
                  inputs:
                    artifactName: 'drop'
                    targetPath: '$(Pipeline.Workspace)/drop'

                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App (Production)'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    appName: '$(webAppName)'
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                    deploymentMethod: 'zipDeploy'
                    slotName: 'staging'

            postRouteTraffic:
              steps:
                - task: AzureCLI@2
                  displayName: 'Smoke tests on staging slot'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "Running smoke tests on staging slot..."
                      sleep 10
                      curl -f https://$(webAppName)-staging.azurewebsites.net/health || exit 1

                - task: AzureAppServiceManage@0
                  displayName: 'Swap staging to production'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    resourceGroupName: '$(resourceGroupName)'
                    webAppName: '$(webAppName)'
                    sourceSlot: 'staging'
                    swapWithProduction: true

                - task: AzureCLI@2
                  displayName: 'Verify production deployment'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "Verifying production deployment..."
                      sleep 10
                      curl -f https://$(webAppName).azurewebsites.net/health || exit 1
                      echo "Production deployment verified!"

            on:
              failure:
                steps:
                  - task: AzureAppServiceManage@0
                    displayName: 'Rollback: Swap back to previous version'
                    inputs:
                      azureSubscription: '$(azureSubscription)'
                      resourceGroupName: '$(resourceGroupName)'
                      webAppName: '$(webAppName)'
                      sourceSlot: 'staging'
                      swapWithProduction: true

              success:
                steps:
                  - task: AzureCLI@2
                    displayName: 'Send success notification'
                    inputs:
                      azureSubscription: '$(azureSubscription)'
                      scriptType: 'bash'
                      scriptLocation: 'inlineScript'
                      inlineScript: |
                        echo "Deployment successful!"
                        # Envoyer notification (Slack, Teams, etc.)
