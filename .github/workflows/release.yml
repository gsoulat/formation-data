name: Semantic Release

on:
  push:
    branches:
      - main
      - master

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: |
          npm install -g semantic-release@latest
          npm install -g @semantic-release/git@latest
          npm install -g @semantic-release/changelog@latest
          npm install -g @semantic-release/github@latest

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main", "master"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              "@semantic-release/github"
            ]
          }
          EOF

      - name: Run Semantic Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          npx semantic-release > release-output.txt 2>&1
          cat release-output.txt

          # Extract version if released
          if grep -q "Published release" release-output.txt; then
            VERSION=$(grep "Published release" release-output.txt | sed -E 's/.*([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
            echo "new_version=$VERSION" >> $GITHUB_OUTPUT
            echo "released=true" >> $GITHUB_OUTPUT
          else
            echo "released=false" >> $GITHUB_OUTPUT
          fi

      - name: Send Discord Notification
        if: steps.semantic_release.outputs.released == 'true'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          REPO_NAME="${{ github.repository }}"
          VERSION="${{ steps.semantic_release.outputs.new_version }}"
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/v${VERSION}"
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"

          # Get commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Build Discord embed
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{
                 \"username\": \"Release Bot\",
                 \"avatar_url\": \"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\",
                 \"embeds\": [{
                   \"title\": \"=€ Nouvelle Release - v${VERSION}\",
                   \"description\": \"Une nouvelle version de **${REPO_NAME}** vient d'être publiée !\",
                   \"color\": 3066993,
                   \"fields\": [
                     {
                       \"name\": \"Version\",
                       \"value\": \"v${VERSION}\",
                       \"inline\": true
                     },
                     {
                       \"name\": \"Branche\",
                       \"value\": \"${{ github.ref_name }}\",
                       \"inline\": true
                     },
                     {
                       \"name\": \"Auteur\",
                       \"value\": \"${{ github.actor }}\",
                       \"inline\": true
                     },
                     {
                       \"name\": \"Commit\",
                       \"value\": \"[\`${GITHUB_SHA:0:7}\`](${COMMIT_URL})\"
                     },
                     {
                       \"name\": \"Liens\",
                       \"value\": \"[=æ Release Notes](${RELEASE_URL}) | [=Ý Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)\"
                     }
                   ],
                   \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\",
                   \"footer\": {
                     \"text\": \"Formation Simplon\"
                   }
                 }]
               }" \
               $DISCORD_WEBHOOK

      - name: Send Discord Error Notification
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{
                 \"username\": \"Release Bot\",
                 \"embeds\": [{
                   \"title\": \"L Erreur lors de la release\",
                   \"description\": \"La création de la release a échoué pour **${{ github.repository }}**\",
                   \"color\": 15158332,
                   \"fields\": [
                     {
                       \"name\": \"Workflow\",
                       \"value\": \"[Voir les logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\"
                     }
                   ],
                   \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
                 }]
               }" \
               $DISCORD_WEBHOOK
