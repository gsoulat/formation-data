name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  validation:
    name: Code Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Validate branch naming (PR only)
        if: github.event_name == 'pull_request'
        run: |
          branch_name="${{ github.head_ref }}"
          if [[ ! $branch_name =~ ^(feature|bugfix|hotfix|release|chore|docs|refactor|test)/.+ ]]; then
            echo "Branch name '$branch_name' does not follow semantic convention"
            exit 1
          fi
          
      - name: Validate conventional commits (PR only)
        if: github.event_name == 'pull_request'
        uses: wagoid/commitlint-github-action@v5
        
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validation
    
    strategy:
      matrix:
        include:
          - name: "Node.js"
            setup: "node-setup"
          - name: "Python"
            setup: "python-setup"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        if: matrix.setup == 'node-setup' && (hashFiles('package.json') != '' || hashFiles('yarn.lock') != '' || hashFiles('pnpm-lock.yaml') != '')
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Node.js dependencies
        if: matrix.setup == 'node-setup' && (hashFiles('package.json') != '' || hashFiles('yarn.lock') != '' || hashFiles('pnpm-lock.yaml') != '')
        run: npm ci
        
      - name: Run Node.js tests
        if: matrix.setup == 'node-setup' && (hashFiles('package.json') != '' || hashFiles('yarn.lock') != '' || hashFiles('pnpm-lock.yaml') != '')
        run: |
          if npm run test --if-present; then
            echo "Node.js tests passed"
          else
            echo "No Node.js tests found or tests failed"
          fi
          
      - name: Setup Python
        if: matrix.setup == 'python-setup' && (hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != '' || hashFiles('setup.py') != '')
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Python dependencies
        if: matrix.setup == 'python-setup' && (hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != '' || hashFiles('setup.py') != '')
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e .; fi
          
      - name: Run Python tests
        if: matrix.setup == 'python-setup' && (hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != '' || hashFiles('setup.py') != '')
        run: |
          if python -m pytest --version > /dev/null 2>&1; then
            python -m pytest
          elif python -m unittest discover > /dev/null 2>&1; then
            python -m unittest discover
          else
            echo "No Python tests found"
          fi
          
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    needs: validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js for linting
        if: hashFiles('package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies for linting
        if: hashFiles('package.json') != ''
        run: npm ci
        
      - name: Run ESLint
        if: hashFiles('package.json') != ''
        run: |
          if npm run lint --if-present; then
            echo "Linting passed"
          else
            echo "No linting script found"
          fi
          
      - name: Setup Python for linting
        if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Python linting tools
        if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          
      - name: Run Python linting
        if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != ''
        run: |
          # Check code formatting with black
          black --check .
          # Check import sorting with isort
          isort --check-only .
          # Check code style with flake8
          flake8 .
          
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'